name: Go
on: [push]
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
#         , windows-latest, macOS-latest: [value1, ...valueN]
    steps:
    
    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
    
    - name: Build linux # This would actually build your project, using zip for an example artifact
      if: ${{matrix.os == 'ubuntu-latest'}}  
      run: |
       go build -o simple_linux . 
    - name: "publish action-artifact zip"
      if: ${{matrix.os == 'ubuntu-latest'}}  
      uses: actions/upload-artifact@v1
      with:
        name: linux
        path: ./simple_linux
        
        
    - name: Build mac # This would actually build your project, using zip for an example artifact
      if: ${{matrix.os == 'macOS-latest'}} 
      run: |
        mkdir build
        go build -o simple_mac . 
        mv simple_mac ./build
        
    - name: "publish action-artifact zip"
      if: ${{matrix.os == 'macOS-latest'}} 
      uses: actions/upload-artifact@v1
      with:
        name: mac.zip
        path: build/

    - name: Build win # This would actually build your project, using zip for an example artifact
      if: ${{matrix.os == 'windows-latest' }} 
      run: |
        mkdir build
        go build -o simple_win . 
        mv simple_win ./build
    - name: "publish action-artifact zip"
      if: ${{matrix.os == 'windows-latest' }} 
      uses: actions/upload-artifact@v1
      with:
        name: win.zip
        path: build/
  release:
    needs: [build]
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
#       - name: Download artefacts
#         uses: actions/download-artifact@v1
#         with:
#           name: win.zip 
      - name: Download artefacts linux
        uses: actions/download-artifact@v1
        with:
          name: linux
#       - name: Download artefacts linux
#         uses: actions/download-artifact@v1
#         with:
#           name: mac.zip 
      - name: list
        run: |
          ls
          cd linux
          ls
#       - name: zip
#         run: |
#           zip simple simple_linux
#       - name: Create Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           tag_name: ${{ github.ref }}
#           release_name: Release ${{ github.ref }}
#           draft: false
#           prerelease: false
#       - name: Upload Release Asset
#         id: upload-release-asset 
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
#           asset_path: ./simple.zip
#           asset_name: simple.zip
#           asset_content_type: application/zip
